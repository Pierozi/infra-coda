AWSTemplateFormatVersion: "2010-09-09"
Description: "Bastion Resources"

Parameters:
  Vpc:
    Description: "VPC identifier."
    Type: String
  Subnet:
    Description: "VPC Subnet"
    Type: AWS::EC2::Subnet::Id
  KeyName:
    Description: "The EC2 Key Pair to allow Remote Desktop access or SSH to the instances."
    Type: AWS::EC2::KeyPair::KeyName
  AmiId:
    Description: "AMI id for Bastion server."
    Type: AWS::EC2::Image::Id
  SecurityGroups:
    Description: "List of Security Groups separate by comma"
    Type: String
    Default: ""

Conditions:
  hasSecurityGroups: !Not [ !Equals [ !Ref SecurityGroups, "" ]  ]

Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: "/application/"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: "ec2-stop-instance"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - ec2:StopInstances
            Condition:
              StringLike:
                ec2:InstanceProfile: "*-BastionStack-*"
            Resource: "*"

  Profile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref WaitHandle
      Timeout: 600

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Bastion security group"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 62467
          ToPort: 62467
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 36349
          ToPort: 36349
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 54926
          ToPort: 54926
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 63666
          ToPort: 63666
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow bastion connect on SSH"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SecurityGroup

  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - prepare
        prepare:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                interval=1
                region=${AWS::Region}
              mode: 000400
              owner: root
              group: root

            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -s ${AWS::StackName} -r Instance --region ${AWS::Region}
                runas=root
              mode: 000400
              owner: root
              group: root
    Properties:
      InstanceType: t2.nano
      KeyName: !Ref KeyName
      ImageId: !Ref AmiId
      IamInstanceProfile: !Ref Profile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: !If [
            hasSecurityGroups,
            !Split [ ',', !Sub "${SecurityGroup},${SecurityGroups}" ],
            !Split [ ',', !Sub "${SecurityGroup}" ]
          ]
          SubnetId: !Ref Subnet
      Tags:
        - Key: Name
          Value: "Bastion"
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -v
            ########################################
            ## CloudFormation Instances Bootstrap ##
            ########################################

            # Helper function
            function error_exit
            {
              /opt/aws/bin/cfn-signal -e 1 -r "$1" '${WaitHandle}'
              exit 1
            }

            rm -f /var/tmp/aws-mon/instance-id

            /opt/aws/bin/cfn-init -v -s ${AWS::StackName} -r Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'

            ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime

            /root/change-ssh-port.sh 63666 62467 36349 54926 || error_exit 'Failed to change ssh port'

            /opt/aws/bin/cfn-signal -e 0 -r 'Stack Complete.' '${WaitHandle}'

Outputs:
  ClientSecurityGroup:
    Description: Client Security Group to allow bastion connexion
    Value: !Ref ClientSecurityGroup
