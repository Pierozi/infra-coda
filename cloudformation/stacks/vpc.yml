AWSTemplateFormatVersion: "2010-09-09"
Description: VPC Resources

Parameters:
  RegionAzs:
    Description: The email to send cloudwatch notification.
    Type: Number

Conditions:
  CreateSubnet1: !Or [ !Equals [!Ref "RegionAzs" , 1] , !Equals [!Ref "RegionAzs" , 2] , !Equals [!Ref "RegionAzs" , 3] , !Equals [!Ref "RegionAzs" , 4] , !Equals [!Ref "RegionAzs" , 5] , !Equals [!Ref "RegionAzs" , 6] ]
  CreateSubnet2: !Or [ !Equals [!Ref "RegionAzs" , 2] , !Equals [!Ref "RegionAzs" , 3] , !Equals [!Ref "RegionAzs" , 4] , !Equals [!Ref "RegionAzs" , 5] , !Equals [!Ref "RegionAzs" , 6] ]
  CreateSubnet3: !Or [ !Equals [!Ref "RegionAzs" , 3] , !Equals [!Ref "RegionAzs" , 4] , !Equals [!Ref "RegionAzs" , 5] , !Equals [!Ref "RegionAzs" , 6] ]
  CreateSubnet4: !Or [ !Equals [!Ref "RegionAzs" , 4] , !Equals [!Ref "RegionAzs" , 5] , !Equals [!Ref "RegionAzs" , 6] ]
  CreateSubnet5: !Or [ !Equals [!Ref "RegionAzs" , 5] , !Equals [!Ref "RegionAzs" , 6] ]
  CreateSubnet6: !Equals [!Ref "RegionAzs" , 6]


Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"

  Igw:
    Type: AWS::EC2::InternetGateway
    Properties: {  }

  GatewayAttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref Igw

  DhcpOption:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: "ec2.internal"
      DomainNameServers:
        - AmazonProvidedDNS

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref Igw
    DependsOn: GatewayAttachIgw

  PublicSubnetAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc

  PublicInSubnetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: "32000"
      Protocol: "-1"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: "1"
        To: "65535"

  PublicOutSubnetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: "32000"
      Protocol: "-1"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: "1"
        To: "65535"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PrivateSubnetAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc

  PrivateInSubnetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: "32000"
      Protocol: "-1"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: "1"
        To: "65535"

  PrivateOutSubnetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: "32000"
      Protocol: "-1"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: "1"
        To: "65535"

  Zone1:
    Type: AWS::CloudFormation::Stack
    Condition: CreateSubnet1
    Properties:
      TemplateURL: zone.yml
      Parameters:
        Range: 1
        Vpc: !Ref Vpc
        PublicNetworkAclId: !Ref PublicSubnetAcl
        PublicRouteTableId: !Ref PublicRouteTable
        AvailabilityZone:
          Fn::Select:
            - 0
            - Fn::GetAZs: ""

  Zone2:
    Type: AWS::CloudFormation::Stack
    Condition: CreateSubnet2
    Properties:
      TemplateURL: zone.yml
      Parameters:
        Range: 2
        Vpc: !Ref Vpc
        PublicNetworkAclId: !Ref PublicSubnetAcl
        PublicRouteTableId: !Ref PublicRouteTable
        AvailabilityZone:
          Fn::Select:
            - 1
            - Fn::GetAZs: ""
  Zone3:
    Type: AWS::CloudFormation::Stack
    Condition: CreateSubnet3
    Properties:
      TemplateURL: zone.yml
      Parameters:
        Range: 3
        Vpc: !Ref Vpc
        PublicNetworkAclId: !Ref PublicSubnetAcl
        PublicRouteTableId: !Ref PublicRouteTable
        AvailabilityZone:
          Fn::Select:
            - 2
            - Fn::GetAZs: ""

  Zone4:
    Type: AWS::CloudFormation::Stack
    Condition: CreateSubnet4
    Properties:
      TemplateURL: zone.yml
      Parameters:
        Range: 4
        Vpc: !Ref Vpc
        PublicNetworkAclId: !Ref PublicSubnetAcl
        PublicRouteTableId: !Ref PublicRouteTable
        AvailabilityZone:
          Fn::Select:
            - 3
            - Fn::GetAZs: ""
  Zone5:
    Type: AWS::CloudFormation::Stack
    Condition: CreateSubnet5
    Properties:
      TemplateURL: zone.yml
      Parameters:
        Range: 5
        Vpc: !Ref Vpc
        PublicNetworkAclId: !Ref PublicSubnetAcl
        PublicRouteTableId: !Ref PublicRouteTable
        AvailabilityZone:
          Fn::Select:
            - 4
            - Fn::GetAZs: ""

  Zone6:
    Type: AWS::CloudFormation::Stack
    Condition: CreateSubnet6
    Properties:
      TemplateURL: zone.yml
      Parameters:
        Range: 6
        Vpc: !Ref Vpc
        PublicNetworkAclId: !Ref PublicSubnetAcl
        PublicRouteTableId: !Ref PublicRouteTable
        AvailabilityZone:
          Fn::Select:
            - 5
            - Fn::GetAZs: ""

Outputs:
  Vpc:
    Description: VPC
    Value: !Ref Vpc

  AvailabilityZones:
    Description: "Availability zones actually used"
    Value: !Join [ ", " , !GetAZs '' ]

  PublicSubnets:
    Description: Public Subnets
    Value:
      !If [
        CreateSubnet6,
        !Join [', ' , [!GetAtt Zone1.Outputs.PublicSubnet, !GetAtt Zone2.Outputs.PublicSubnet, !GetAtt Zone3.Outputs.PublicSubnet, !GetAtt Zone4.Outputs.PublicSubnet , !GetAtt Zone5.Outputs.PublicSubnet, !GetAtt Zone6.Outputs.PublicSubnet]],
        !If [
          CreateSubnet5,
          !Join [', ' , [!GetAtt Zone1.Outputs.PublicSubnet, !GetAtt Zone2.Outputs.PublicSubnet, !GetAtt Zone3.Outputs.PublicSubnet, !GetAtt Zone4.Outputs.PublicSubnet , !GetAtt Zone5.Outputs.PublicSubnet]],
          !If [
            CreateSubnet4,
            !Join [ ', ' , [!GetAtt Zone1.Outputs.PublicSubnet, !GetAtt Zone2.Outputs.PublicSubnet, !GetAtt Zone3.Outputs.PublicSubnet, !GetAtt Zone4.Outputs.PublicSubnet]],
            !If [
              CreateSubnet3,
              !Join [', ' , [!GetAtt Zone1.Outputs.PublicSubnet, !GetAtt Zone2.Outputs.PublicSubnet, !GetAtt Zone3.Outputs.PublicSubnet]] ,
              !If [ CreateSubnet2,
                    !Join [ ', ' ,
                            [!GetAtt Zone1.Outputs.PublicSubnet,
                             !GetAtt Zone2.Outputs.PublicSubnet]
                    ],
              !GetAtt Zone1.Outputs.PublicSubnet
            ]
          ]
        ]
      ]
    ]
      #end of if


  PublicSubnet1:
    Description: Public Subnet 1
    Value: !GetAtt Zone1.Outputs.PublicSubnet
